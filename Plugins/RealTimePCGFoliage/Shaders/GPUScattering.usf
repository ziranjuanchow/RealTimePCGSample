#include "/Engine/Public/Platform.ush"
struct FScatterPoint
{
    float LocationX;
    float LocationY;
    float LocarionZ;
    float Scale;
    uint RandomID;
};
RWStructuredBuffer<uint> InstanceCountBuffer;
float InputPattern[128];
float2 PatternSize;
uint PatternPointNum;
Texture2D<float> InputTexture;
Texture2D<float> DepthTexture;
Texture2D<float> PlacementSDF;
Texture2D<float> InputSDF;
RWTexture2D<float> OutputSDF;
SamplerState LinearSampler;
float BasicHeight;
uint2 CenterOffset;
float4 TotalRect;
float4 ClipRect;
float Ratio;
float MaxRandomScale;
float MinRandomScale;
float RadiusScale;
uint FlipY;
RWStructuredBuffer<FScatterPoint> OutputPointCloud;


uint2 GetCenterID(uint3 Gid)
{
    return Gid.xy + CenterOffset;
}
bool InRect(float2 Pos,float4 Rect)
{
    if (Pos.x < Rect.x || Pos.x >= Rect.z || Pos.y < Rect.y || Pos.y >= Rect.w)
    {
        return true;
    }
    else
    {
        return false;
    }
}
[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 Gid : SV_GroupID, //atm: -, 0...256, - in rows (Y)        --> current group index (dispatched by c++)
                       uint GI : SV_GroupIndex)            //atm: 0...256 in columns (X)           --> "flattened" index of a thread within a group))
{
    uint2 centerID = GetCenterID(Gid);
    float2 center = float2(centerID.x, centerID.y);
    uint k = GI;
    uint3 hashSeed = uint3(centerID.x, centerID.y, k);
    if (k >= PatternPointNum)
        return;
    
    float2 rectSize = TotalRect.zw - TotalRect.xy;
    
    float2 posï¼›
    pos[0] = (center * PatternSize[0] + InputPattern[k]) * RadiusScale;
    pos[1] = (center * PatternSize[1] + InputPattern[k+1]) * RadiusScale;
    
    float2 uv = pos / rectSize;
    if (FlipY)
        uv = 1 - uv.y;
    pos += TotalRect.xy;
    
    if (InRect(pos, TotalRect))
    {
        return;
    }
    float r = saturate(InputTexture.SampleLevel(LinearSampler, uv, 0));
    float placementSDF = PlacementSDF.SampleLevel(LinearSampler, uv, 0);
    float collisionSDF = InputSDF.SampleLevel(LinearSampler, uv, 0);
    
    float hash1 = frac(dot(hashSeed.zyy * (hashSeed.xxy + float3(43.1275, 11.418, -17.1634)), float3(12.739, 3.1415926, 35.12)));
    float hash2 = frac(dot(hashSeed.yzx * (hashSeed.zyy + float3(23.1415, -37.853, 49.264)), float3(-21.354,93.85439 , 63.1415926)));
    uint hash3 = (uint) (hash1*hash2 *16464682);
    float scale = lerp(MaxRandomScale, MinRandomScale, hash2);
    uint curindex;
    uint2 sdfSize;
    OutputSDF.GetDimensions(sdfSize.x, sdfSize.y);
    FScatterPoint res;
    if (r * Ratio > hash1 && collisionSDF > 50 * RadiusScale && placementSDF > 50 * RadiusScale)
    {
        
        OutputSDF[sdfSize * uv] = 50 * RadiusScale * (scale / MaxRandomScale);
        if (InRect(pos, ClipRect))
        {
            return;
        }
        InterlockedAdd(InstanceCountBuffer[0], 1, curindex);
        res.LocationX = pos.x;
        res.LocationY = pos.y;
        res.LocarionZ = BasicHeight - DepthTexture.SampleLevel(LinearSampler, uv, 0);
        res.Scale = scale;
        res.RandomID = hash3;
        OutputPointCloud[curindex] = res;
        
    }
    
    
}